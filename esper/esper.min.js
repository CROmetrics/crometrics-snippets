/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

(function start(){
  'use strict';
  let $ = window.jQuery;

  if (!$ || !$.fn || !$.fn.jquery){
    fetch('https://code.jquery.com/jquery-3.2.1.min.js').then(r=>r.text()).then(t=>{
      new Function(t)();
      start();
    });
    return;
  }

  const COLORS = ["success", "danger", "warning", "primary", "info"];
  const end = "";

  class Esper extends HTMLElement{
    constructor(){
      super();
      this.forensics();
    }
    forensics(){
      if (window.optimizely){
        this.optimizely = {};
        if (window.optimizely.data && !window.optimizely.data.note){
          let data = window.optimizely.data;
          this.optimizelyClassic = {
            accountId: window.optimizely.getAccountId(),
            revision: window.optimizely.revision,
            state: data.state || {},
            audiences: data.audiences || {},
            variations: data.variations || {},
            experiments: data.experiments || {},
            segments: data.segments || {},
            visitor: data.visitor || {},
          };
        }
        if (window.optimizely.get){
          let data = window.optimizely.get('data');
          this.optimizelyX = {
           accountId: data.accountId,
           revision: data.revision,
           audiences: data.audiences || {},
           variations: data.variations || {},
           experiments: data.experiments || {},
           campaigns: data.campaigns || {},
          };
        }
      }

      if (window.DYO){
        this.dynamicYield = {
          experiments: window.DYO.oexps || {}
        };
      }

      if (window.monetate){
        this.monetate = {
          // experiments: window.monetate || {}
        };
      }

      if (window.SentientAscend){
        this.sentient = {
          // experiments: window.SentientAscend || {}
        };
      }

    }

    connectedCallback(){
      let shadow = this.attachShadow({mode: 'closed'});
      let stylesheet = document.createElement('style');
      stylesheet.innerHTML = __webpack_require__(1);

      // $("#opt_container,#opt_styles,#opt_backdrop").remove();
      this.$container = $("<div id='opt_container'/>");
      this.$backdrop = $("<div id='opt_backdrop'/>").click(()=>{
        this.remove();
      });

      // note: old jQuery isn't able to work with the shadow dom, so do it native.
      shadow.appendChild(stylesheet);
      shadow.appendChild(this.$container[0]);
      shadow.appendChild(this.$backdrop[0]);

      // if (!window.optimizely) return this.$container.append("<h1>Error: Missing Optimizely.</h1>");
      // if (!$) return this.$container.append("<h1>Error: Missing jQuery.</h1>");

      this.launch();
      // this.textContent = 'Just a basic custom element.';
    } 
    disconnectedCallback(){

    } 
    attributeChangedCallback() {

    }
    
    $makeTabs(tabs){
      let $section = $(`<div class="tab-section">`);
      let $links = $(`<ul class="links">`).appendTo($section);
      let $tabs = $(`<div class="tabs">`).appendTo($section);
      let tabCount = 0;
      for (let t in tabs){
        let [label, $content] = tabs[t];
        // let key = label.replace(/[^\w]/g, '');
        let $tab = $(`<div class="tab"></div>`).append($content).appendTo($tabs);
        let $link = $(`<a href="#">${label}</a>`).appendTo($links).click(e=>{
          e.preventDefault();
          $tabs.find('> .active').removeClass('active');
          $tab.addClass('active');
          $links.find('> li > .active').removeClass('active');
          $link.addClass('active');
        }).wrap('<li>');
        if (!(tabCount++)) $tab.add($link).addClass('active');
      }
      return $section;
    }

    launch() {
      let $display = $(`<div id="ooo_container" class="container"></div>`).appendTo(this.$container);
      this.$stats().appendTo($display);

      let tabs = [];
      if (this.optimizely){
        if (this.optimizelyClassic){
          tabs.push(['OptiClassic', this.$optimizelyClassic()]);
        }
        if (this.optimizelyX){
          tabs.push(['OptiX', this.$optimizelyClassic()]);
        }
      }
      if (this.dynamicYield){
        tabs.push(['Dynamic Yield', $(`<p>coming soon...</p>`)]);
      }
      if (this.monetate){
        tabs.push(['Monetate', $(`<p>coming soon...</p>`)]);
      }
      if (this.sentient){
        tabs.push(['Sentient', $(`<p>coming soon...</p>`)]);
      }
      this.$makeTabs(tabs).addClass('horizontal').appendTo($display);
    }

    $stats(){
      let $section = $(`<h1 class="header center">${window.location.host}</h1>`);
      // let $section = $(
      // `<section class="container">
      //   <div class="well">
      //     <h1 class="header center">${window.location.host}</h1>
      //     <div id="account_stats" class="row">
            
      //     </div>
      //   </div>
      // </section>`);
      // let $info = $section.find('#account_stats');
      // if (this.optimizely){
      //   let hasX = this.optimizely && this.optimizelyX, hasClassic = this.optimizely && this.optimizelyClassic;
      //   $info.append(
      //   `<div class="col">
      //     <div>${hasX?'OptX(✔)':'OptX(✗)'}</div><div>${hasClassic?'Classic(✔)':'Classic(✗)'}</div>
      //   </div>`);
      //   // <div class="col">
      //   //   <u>Account Owner</u><br><span>${this.accountId}</span>
      //   // </div>
      //   // <div class="col">
      //   //   <u>Snippet Revision</u><br><span>${this.revision}</span>
      //   // </div>
      //   // <div class="col">
      //   //   <u>Approx. Library Size</u><br><span>${(JSON.stringify(window.optimizely).length / 1e3).toFixed()} KB</span>
      //   // </div>
      // }
      return $section;
    }

    $optimizelyClassic(){
      let data = this.optimizelyClassic;
      let tabs = [
        ["Info", `<div class="col-3">
          <dl class="box">
            <dt>Account Owner</dt>
            <dd>${data.accountId}</dd>
          </dl>
          <dl class="box">
            <dt>Snippet Revision</dt>
            <dd>${data.revision}</dd>
          </dl>
          <dl class="box">
            <dt>Approx. Library Size</dt>
            <dd>${(JSON.stringify(window.optimizely).length / 1e3).toFixed()} KB</dd>
          </dl>
          <dl class="box">
            <dt>Classic Experiments</dt>
            <dd>${Object.keys(data.experiments).length}</dd>
          </dl>
          <dl class="box">
            <dt>Classic Variations</dt>
            <dd>${Object.keys(data.variations).length}</dd>
          </dl>
          <dl class="box">
            <dt>Classic Audiences</dt>
            <dd>${Object.keys(data.audiences).length}</dd>
          </dl>
        </div>`]
      ];

      // tabs.push(['all experiments', this.renderAudiences()]);
      // tabs.push(['live experiments', $(`<p>
      //   ${Math.random()} Lorem ipsum dolor sit amet, consectetur adipisicing elit. Fugit assumenda maxime necessitatibus illo aliquam consequuntur unde veritatis aspernatur nulla, facere? Excepturi eius maiores suscipit necessitatibus porro nam dolor, adipisci beatae.
      // </p>`)]);
      // tabs.push(['paused experiments', $(`<p>
      //   ${Math.random()} Lorem ipsum dolor sit amet, consectetur adipisicing elit. Fugit assumenda maxime necessitatibus illo aliquam consequuntur unde veritatis aspernatur nulla, facere? Excepturi eius maiores suscipit necessitatibus porro nam dolor, adipisci beatae.
      // </p>`)]);
      // tabs.push(['audiences', $(`<p>
      //   ${Math.random()} Lorem ipsum dolor sit amet, consectetur adipisicing elit. Fugit assumenda maxime necessitatibus illo aliquam consequuntur unde veritatis aspernatur nulla, facere? Excepturi eius maiores suscipit necessitatibus porro nam dolor, adipisci beatae.
      // </p>`)]);
      // tabs.push(['your segments', $(`<p>
      //   ${Math.random()} Lorem ipsum dolor sit amet, consectetur adipisicing elit. Fugit assumenda maxime necessitatibus illo aliquam consequuntur unde veritatis aspernatur nulla, facere? Excepturi eius maiores suscipit necessitatibus porro nam dolor, adipisci beatae.
      // </p>`)]);
      // tabs.push(['all segments', $(`<p>
      //   ${Math.random()} Lorem ipsum dolor sit amet, consectetur adipisicing elit. Fugit assumenda maxime necessitatibus illo aliquam consequuntur unde veritatis aspernatur nulla, facere? Excepturi eius maiores suscipit necessitatibus porro nam dolor, adipisci beatae.
      // </p>`)]);
      // tabs.push(['my experience', $(`<p>
      //   ${Math.random()} Lorem ipsum dolor sit amet, consectetur adipisicing elit. Fugit assumenda maxime necessitatibus illo aliquam consequuntur unde veritatis aspernatur nulla, facere? Excepturi eius maiores suscipit necessitatibus porro nam dolor, adipisci beatae.
      // </p>`)]);

      let experiments = '', live = 0, paused = 0;
      for (let i in data.experiments){
        let item = data.experiments[i];
        experiments += `<label class="segment col-sm-5 label">${item.name}</label>`;
      }
      tabs.push(['Experiments', `
        <h2>Experiments:</h2><hr>
        ${experiments || '<label class="badge badge-danger">There are no Experiments.</label>'}
      `]);

      let audiences = '';
      for (let i in data.audiences){
        let item = data.audiences[i];
        audiences += `<label class="segment col-sm-5 label">${item.name}</label>`;
      }
      tabs.push(['Audiences', `
        <h2>Audiences:</h2><hr>
        ${audiences || '<label class="badge badge-danger">There are no Audiences.</label>'}
      `]);

      let segments = '';
      for (let i in data.segments){
        let item = data.segments[i];
        segments += `<label class="segment col-sm-5 label">${item.name}</label>`;
      }
      tabs.push(['Segments', `
        <h2>Segments:</h2><hr>
        ${segments || '<label class="badge badge-danger">There are no Segments.</label>'}
      `]);

      return this.$makeTabs(tabs).addClass('vertical');
    }

    // $optimizelyX(){
    //   let $optimizely = $(`
    //     <div class="optimizely">
    //       <section id="ooo_container_visitors" class="container">
    //         <div class="well"><br>
    //           <h1 class="header center">This Site: <b>${window.location.host}</b></h1>
    //           <div id='account_stats' class="row">
    //             <div class="col">
    //               <div>${this.X?'OptX(✔)':'OptX(✗)'}</div><div>${this.C?'Classic(✔)':'Classic(✗)'}</div>
    //             </div>
    //             <div class="col">
    //               <u>Account Owner</u><br><span>${this.accountId}</span>
    //             </div>
    //             <div class="col">
    //               <u>Snippet Revision</u><br><span>${this.revision}</span>
    //             </div>
    //             <div class="col">
    //               <u>Approx. Library Size</u><br><span>${(JSON.stringify(window.optimizely).length / 1e3).toFixed()} KB</span>
    //             </div>
    //           </div>
    //           <div class="row">
    //             <div class="col">
    //               <u>X Experiments</u><br><span>${Object.keys(this.xExperiments).length}</span>
    //             </div>
    //             <div class="col">
    //               <u>X Variations</u><br><span>${Object.keys(this.xVariations).length}</span>
    //             </div>
    //             <div class="col">
    //               <u>X Audiences</u><br><span>${Object.keys(this.xAudiences).length}</span>
    //             </div>
    //             <div class="col">
    //               <u>X Campaigns</u><br><span>${Object.keys(this.xCampaigns).length}</span>
    //             </div>
    //           </div>
    //           <div class="row">
    //             <div class="col">
    //               <u>Classic Experiments</u><br><span>${Object.keys(this.experiments).length}</span>
    //             </div>
    //             <div class="col">
    //               <u>Classic Variations</u><br><span>${Object.keys(this.variations).length}</span>
    //             </div>
    //             <div class="col">
    //               <u>Classic Audiences</u><br><span>${Object.keys(this.audiences).length}</span>
    //             </div>
    //           </div>
    //         </div><br>
    //         <div id="ooo_filters" class="row center">
    //           <div class="btn-group" data-toggle="buttons">
    //             <span style="font-weight:bolder;font-size:16px;">Experiment Status:&emsp;</span>
    //             <button class="btn info btn-info" filter="all">ALL EXPERIMENTS</button>
    //             <button class="btn info btn-info" filter="live">LIVE EXPERIMENTS</button>
    //             <button class="btn info btn-info" filter="paused">PAUSED EXPERIMENTS</button>
    //           </div><br>
    //           <div id="view_people" class="btn-group" data-toggle="button">
    //             <span style="font-weight:bolder;font-size:16px;">Browse Visitor Criteria:&emsp;</span>
    //             <button class="btn btn-warning" show="ooo_audiences" id="view_audiences">AUDIENCES</button>
    //             <button class="btn btn-warning" show="ooo_visitor_you" id="view_visitor_you">YOUR SEGMENTS</button>
    //             <button class="btn btn-warning" show="ooo_visitor_all" id="view_visitor_all">ALL SEGMENTS</button>
    //             <button class="btn btn-warning btn-lg" show="my_variants" id="show_my_variants">MY EXPERIENCE</button>
    //           </div>
    //           <hr>
    //           <section id="ooo_container_visitor" class="container">
    //             <div class="row-fluid">
    //               <div style="display:none;" id="ooo_audiences" class="well blue col-xs-12">
    //                 <a class="closeme">CLOSE</a> ${this.renderAudiences()}
    //               </div>
    //               <div style="display:none;" id="ooo_visitor_you" class="well blue col-xs-12">
    //                 <a class="closeme">CLOSE</a> ${this.renderYourSegments()}
    //               </div>
    //               <div style="display:none;" id="ooo_visitor_all" class="well blue col-xs-12">
    //                 <a class="closeme">CLOSE</a> ${this.renderAllSegments()}
    //               </div>
    //               <div id="my_variants" class="center well alert alert-info" style="display:none">
    //                 <a class="closeme">CLOSE</a> ${this.renderMyVariants()}
    //               </div>
    //             </div>
    //           </section>

    //         </div>

    //       </section>
    //     </div>
    //   `);
    //   let $optimizelyExperiments = $('<section id="ooo_containerExperiments" class="container"></section>').appendTo($optimizely),
    //       $alert = $(`
    //         <div id="alert" class="center well alert alert-warning" style="display:none;">
    //           <a class="closeme">CLOSE</a>
    //         </div>`).appendTo($optimizely);

    //   $.each(this.getExperimentId().reverse(), (e, t)=>{
    //     $optimizelyExperiments.append(this.addExperiment(t));
    //   });
    //   $optimizely.find(".closeme").click(function (){
    //     $(this).parent().hide();
    //     $optimizely.find("#ooo_filters > div >  button, #ooo_filters > div > label").removeClass("active");
    //   });
    //   $optimizely.find("[filter]").click(function (){
    //     $optimizely.find("[experiment_id]").hide();
    //     let filter = $(this).attr("filter");
    //     $optimizely.find("#ooo_container_visitor > div > div").hide();
    //     let $experiments = $optimizelyExperiments.find("." + filter + "Experiment").show();
    //     if ($experiments.length){
    //       $alert.html("").css("display", "none");
    //     }else{
    //       $alert.css("display", "block").html("<h2> There are no " + (filter == "ooo" ? "" : filter) + " experiments to show :(");
    //     }
    //   });
    //   $optimizely.find("#view_people button").click(function (){
    //     let $this = $(this),
    //       t = $this.attr("show"),
    //       r = $optimizely.find("#" + t),
    //       i = r.is(":visible");
    //     $optimizely.find("#ooo_container_visitor .well").hide();
    //     r.css("display", i ? "none" : "block");
    //     $optimizely.find("#ooo_filters > div >  button, #ooo_filters > div > label").removeClass("active");
    //   });
    //   $optimizely.find("#show_my_variants").click(function (){
    //     let $this = $(this),
    //       t = $optimizely.find($this.attr("show")),
    //       r = t.is(":visible");
    //     t.css("display", r ? "none" : "block");
    //     $optimizely.find("#ooo_filters > div >  button, #ooo_filters > div > label").removeClass("active");
    //   });
    //   return $optimizely;
    // }


    
    getExperimentId(id) {
      if (!id) return Object.keys(this.experiments);
      return !this.experiments[id] ? alert("Experiment #" + id + " not found.") : this.experiments[id];
    }
    getExperimentName(id) {
      return this.isExperiment(id) ? this.experiments[id].name : false;
    }
    addExperiment(id) {
      let experiment = this.experiments[id] || {},
        variations = experiment.variation_ids || {},
        varCount = Object.keys(variations).length,
        active = ~$.inArray(id, this.state.activeExperiments);
      
      let variationsLabel = `${experiment.section_ids.length ? `MVT (${experiment.section_ids.length} Elements)` : "A/B/n"} | ${varCount} Variations`;
      let statusLabel = active ? `<label style="font-size:100%;" class="label label-success label-large show_variations">LIVE</label>`:`<label style="font-size:100%;" class="label label-grey">Not Running</label>`;
      let $experiment = $(`<div experiment_id="${id}" class="row ${active?" liveExperiment":" pausedExperiment"} allExperiment">
        <i class="icon-plus"></i>
         <h3><a class="experiment_name">${this.getExperimentName(id)}</a></h3>&emsp;
         <code class="show_variations">Experiment ID: ${id}</code>&emsp;
         <code class="show_variations">${variationsLabel}</code>&emsp;
         ${statusLabel}&emsp;
         ${(varCount ? `<button class="show_variations btn btn-danger">View Variations</button>`: "")} &emsp;
         ${(experiment.manual ? `<label class="label label-warning">Manually Activated</label>`: "")}
         ${(experiment.code ? `&emsp;<button class="show_code btn btn-small btn-info">View Script</button><pre class="pre-scrollable script_display" style="display:none;">${this.htmlspecialchars(experiment.code)}</pre>` : "")}
         <section style="display:none;" class="variation_section container"></section>
      </div>`);
      let $variationsSection = $experiment.find(".variation_section").append(this.renderVariationsSection(id));
      $experiment.find(".show_variations").click(function (){
        $variationsSection.toggle();
        $experiment.find("button.show_variations").text($variationsSection.is(":visible") ? "Hide Variations" : "View Variations");
      });
      $experiment.find(".show_code").click(function (){
        let $this = $(this), $code = $this.parent().find("pre");
        $code.toggle();
        $this.text($code.is(":visible") ? "Hide Script" : "View Script");
      });
      return $experiment;
    }
    renderYourSegments() {
      if (!this.visitor.segments) return "<h2 class='center'><label class='badge badge-danger'>You are not part of any segments!</label></h2>";
      let r = this.visitor.segments,
        i = 0,
        s = "<h2>Here are the segments you are part of: </h2><br><br>";
      $.each(r, (n, r)=>{
        if (!this.segments[n]) return;
        s += "<label class='segment col-sm-5 label label-" + COLORS[i] + "'>" + this.segments[n].name + " = " + r + "</label>";
        i = i == 3 ? 0 : i + 1;
      });
      return s;
    }
    renderAllSegments() {
      if (!this.segments) return "<h2 class='center'><label class='badge badge-danger'>There are no segments created.</label></h2>";
      let r = "<h2>Here are all segments being targeted towards on this site: </h2><hr>",
        i = 0;
      $.each(this.segments, (n, s)=>{
        r += "<label class='segment col-sm-5 label label-" + COLORS[i] + "'>" + this.segments[n].name + "</label>";
        i = i == 3 ? 0 : i + 1;
      });
      return r;
    }
    renderMyVariants() {
      let t = window.optimizely.variationNamesMap || {},
        r = 0,
        i = "<h2>Here are the tests and variations you are currently a part of!</h2>";
      if (!t || !Object.keys(t).length) return "<h2 class='center'><label class='badge badge-danger'>You are not in any experiments! Shame...</label></h2>";
      $.each(t, (t, n)=>{
        i += "<label class='segment col-sm-12 label label-" + COLORS[r] + "' style='width:90%;left:5%;'>&emsp;" + this.experiments[t].name + " - &emsp;<code>" + n + "</code></label>";
        r = r == 3 ? 0 : r + 1;
      });
      return i;
    }
    renderAudiences() {
      if (!this.audiences) return "<h2 class='center'><label badge badge-danger'>There are no audiences created.</label></h2>";
      let r = 0,
        i = "<h2>Here are all audiences being observed in analytics on this site: </h2><hr>";
      $.each(this.audiences, (t, n)=>{
        i += "<label class='segment col-sm-5 label label-" + COLORS[r] + "'>" + n.name + "</label>";
        r = r == 3 ? 0 : r + 1;
      });
      return i;
    }
    renderVariationsSection(eId) { //was render_experiment_page
      let experiment = this.experiments[eId];
      let $variations = $("<div/>");
      $.each(experiment.variation_ids, (index, vId)=>{
        let name = this.variations[vId].name;
        let code =  this.variations[vId].code;
        let previewLink = (()=>{
          let link = location.href;
          link += (link.split("?")[1] ? "&" : "?") + "optimizely_x" + eId + "=" + index;
          return `<a href="${link}" class="pull-right btn btn-primary" target="_blank">Preview Variation</a>`;
        })();
        let $variation = $(`
          <div class="row oooExperiment_variation" variation_id="${vId}">
            <div class="col-sm-3">
              <h3>${name} ${previewLink}</h3>
            </div>
            <div class="col-sm-9">
              <pre class="col-sm-12">${(code ? this.htmlspecialchars(code) : "Empty Variant Code")}</pre>
            </div>
          </div>
        `);
        $variations.append($variation).append("<hr>");
      });
      return $variations;
    }
    isExperiment(e) {
      return !!this.experiments[e];
    }
    isVariation(e) {
      return !!this.variations[e];
    }
    htmlspecialchars(e) {
      return e.replace(/&/g, "&").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
    }
  }
  // Define the new element
  let int = Math.random().toString().substr(2), name = 'optimizely-analysis-'+int;
  customElements.define(name, Esper);
  let esper = document.createElement(name);
  document.body.appendChild(esper);
})();

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {


        var result = __webpack_require__(2);

        if (typeof result === "string") {
            module.exports = result;
        } else {
            module.exports = result.toString();
        }
    

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(3)(undefined);
// imports


// module
exports.push([module.i, ":host {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  font-size: 13px;\n  z-index: 99999999; }\n\n#opt_backdrop {\n  width: 100%;\n  height: 100%;\n  background: rgba(0, 0, 0, 0.4); }\n\n#opt_container {\n  position: absolute;\n  overflow-y: auto;\n  background: #FFF;\n  padding: 20px;\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%);\n  border-radius: 4px;\n  box-shadow: 0 0 28px -1px black;\n  min-height: 300px;\n  width: calc(100% - 20px);\n  box-sizing: border-box;\n  max-height: 99%;\n  max-width: 800px; }\n\n.well .col {\n  width: 25%;\n  float: left;\n  text-align: center; }\n\n.center {\n  text-align: center; }\n\ncode {\n  padding: 2px 4px;\n  font-size: 90%;\n  color: #c7254e;\n  background-color: #f9f2f4;\n  white-space: nowrap;\n  border-radius: 4px; }\n\nlabel {\n  display: inline-block;\n  margin: 5px;\n  padding: 5px;\n  border-radius: 3px;\n  color: black; }\n\ndl.box {\n  border: 1px solid gray;\n  background: white;\n  text-align: center; }\n  dl.box dt {\n    border-bottom: 1px solid gray;\n    font-size: 1.1em;\n    line-height: 1em;\n    font-style: italic;\n    padding: 10px; }\n  dl.box dd {\n    font-weight: bold;\n    margin: 0;\n    padding: 10px;\n    font-size: 1.2em; }\n\n.col-2 {\n  display: flex;\n  flex-wrap: wrap;\n  margin-left: -10px;\n  width: calc(100% + $padding*2); }\n  .col-2 > * {\n    box-sizing: border-box;\n    width: calc(50% - 10px);\n    margin: 10px; }\n\n.col-3 {\n  display: flex;\n  flex-wrap: wrap;\n  margin-left: -10px;\n  width: calc(100% + $padding*2); }\n  .col-3 > * {\n    box-sizing: border-box;\n    width: calc(33.33333% - 20px);\n    margin: 10px; }\n\n.col-4 {\n  display: flex;\n  flex-wrap: wrap;\n  margin-left: -10px;\n  width: calc(100% + $padding*2); }\n  .col-4 > * {\n    box-sizing: border-box;\n    width: calc(25% - 30px);\n    margin: 10px; }\n\n@media (max-width: 768px) {\n  .col-2 > *, .col-3 > *, .col-4 > * {\n    width: 100%; } }\n\n.tab-section {\n  color: black; }\n  .tab-section > .links {\n    list-style: none;\n    padding: 0;\n    margin: 0; }\n  .tab-section > .tabs > .tab {\n    display: none; }\n    .tab-section > .tabs > .tab.active {\n      display: block; }\n  .tab-section.horizontal {\n    margin-top: 10px; }\n    .tab-section.horizontal > .links > li {\n      display: inline-block; }\n    .tab-section.horizontal > .links a {\n      display: block;\n      transform: translateY(1.1px);\n      border: 1px solid silver;\n      border-bottom: 0;\n      border-top-left-radius: 5px;\n      border-top-right-radius: 5px;\n      padding: 4px 6px;\n      color: #18233e;\n      text-decoration: none;\n      font-weight: bold;\n      margin-right: 4px; }\n      .tab-section.horizontal > .links a.active {\n        background: whitesmoke; }\n    .tab-section.horizontal > .tabs {\n      border: 1px solid silver;\n      border-top-right-radius: 5px;\n      border-bottom-left-radius: 5px;\n      border-bottom-right-radius: 5px;\n      background: whitesmoke;\n      padding: 10px; }\n  .tab-section.vertical {\n    display: flex; }\n    .tab-section.vertical > .links {\n      white-space: nowrap;\n      padding-right: 10px; }\n      .tab-section.vertical > .links a {\n        display: block;\n        text-decoration: none;\n        font-weight: bold;\n        background: #607D8B;\n        border-radius: 6px;\n        color: white;\n        text-align: center;\n        padding: 4px 12px;\n        margin: 4px; }\n        .tab-section.vertical > .links a.active {\n          color: #18233e;\n          background: #03a9f4; }\n\n.btn {\n  padding: 10px;\n  border-radius: 2px;\n  -webkit-border-radius: 2px;\n  cursor: pointer;\n  border: 1px solid transparent; }\n\n.btn-info,\n.label-info {\n  background: #428bca;\n  border-color: #357ebd; }\n\n.btn-info:hover,\n.label-info:hover {\n  background: #3276b1;\n  border-color: #285e8e; }\n\n.btn-success,\n.label-success {\n  background: #5cb85c;\n  border-color: #4cae4c; }\n\n.btn-success:hover,\n.label-success:hover {\n  background: #47a447;\n  border-color: #398439; }\n\n.btn-warning,\n.label-warning {\n  background: #f0ad4e;\n  border-color: #eea236; }\n\n.btn-warning:hover,\n.label-warning:hover {\n  background: #ed9c28;\n  border-color: #d58512; }\n\n.btn-danger,\n.label-danger {\n  background: #d9534f;\n  border-color: #d43f3a; }\n\n.btn-danger:hover,\n.label-danger:hover {\n  background: #d2322d;\n  border-color: #ac2925; }\n\n.btn-primary,\n.label-primary {\n  background: #428bca;\n  color: black !important;\n  border-color: #357ebd; }\n\n.btn-primary:hover,\n.label-primary:hover {\n  background: #3276b1;\n  border-color: #285e8e; }\n\npre {\n  width: 95%;\n  overflow: hidden;\n  word-wrap: break-word; }\n\n.row {\n  width: 100%;\n  display: inline-block;\n  margin: 0;\n  padding: 5px; }\n\n.well {\n  background-color: #f5f5f5;\n  padding: 10px;\n  border: 1px solid #e3e3e3;\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.05);\n  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.05); }\n\n.pull-right {\n  float: right; }\n\n.pull-left {\n  float: left; }\n\n.closeme {\n  position: relative;\n  top: -7px;\n  right: -47%;\n  cursor: pointer;\n  font-size: 10px;\n  background: #FFF;\n  color: #35AFE3;\n  border-radius: 8px;\n  padding: 4px; }\n\n.segment {\n  float: none; }\n", ""]);

// exports


/***/ }),
/* 3 */
/***/ (function(module, exports) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
module.exports = function(useSourceMap) {
	var list = [];

	// return the list of modules as css string
	list.toString = function toString() {
		return this.map(function (item) {
			var content = cssWithMappingToString(item, useSourceMap);
			if(item[2]) {
				return "@media " + item[2] + "{" + content + "}";
			} else {
				return content;
			}
		}).join("");
	};

	// import a list of modules into the list
	list.i = function(modules, mediaQuery) {
		if(typeof modules === "string")
			modules = [[null, modules, ""]];
		var alreadyImportedModules = {};
		for(var i = 0; i < this.length; i++) {
			var id = this[i][0];
			if(typeof id === "number")
				alreadyImportedModules[id] = true;
		}
		for(i = 0; i < modules.length; i++) {
			var item = modules[i];
			// skip already imported module
			// this implementation is not 100% perfect for weird media query combinations
			//  when a module is imported multiple times with different media queries.
			//  I hope this will never occur (Hey this way we have smaller bundles)
			if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
				if(mediaQuery && !item[2]) {
					item[2] = mediaQuery;
				} else if(mediaQuery) {
					item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
				}
				list.push(item);
			}
		}
	};
	return list;
};

function cssWithMappingToString(item, useSourceMap) {
	var content = item[1] || '';
	var cssMapping = item[3];
	if (!cssMapping) {
		return content;
	}

	if (useSourceMap && typeof btoa === 'function') {
		var sourceMapping = toComment(cssMapping);
		var sourceURLs = cssMapping.sources.map(function (source) {
			return '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'
		});

		return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
	}

	return [content].join('\n');
}

// Adapted from convert-source-map (MIT)
function toComment(sourceMap) {
	// eslint-disable-next-line no-undef
	var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
	var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;

	return '/*# ' + data + ' */';
}


/***/ })
/******/ ]);